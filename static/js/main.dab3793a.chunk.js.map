{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/obl.jpg","components/Profile/Profile.module.css","redux/profile-reducer.tsx","redux/dialog-reducer.tsx","redux/sidebar-reducer.tsx","redux/redux-store.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","push","newText","dialogsData","name","messageData","newMessageBody","dialogReducer","body","initionState","sidebarReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","store","createStore","Header","className","s","header","src","alt","Navbar","nav","item","to","activeClassName","activeLink","ProfileInfo","ava","descriptionBlock","Post","props","MyPosts","postElements","map","p","newPostElement","React","createRef","postBlock","onChange","e","text","current","value","updateNewPostText","ref","onClick","addPost","MyPostsContainer","connect","dispatch","updateNewPostTextActionCreator","Profile","DialogItem","path","dialog","Message","Dialogs","dialogElements","d","messageElements","m","dialogs","dialogsItems","messages","target","updateNewMessageBody","placeholder","sendMessage","SuperDialogsContainer","updateNewMessageBodyCreator","App","render","DialogsContainer","Boolean","window","location","hostname","match","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.dab3793a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__39050\",\"item\":\"Navbar_item__3kXBA\",\"activeLink\":\"Navbar_activeLink__2ULO0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__znGEb\",\"dialogsItems\":\"Dialogs_dialogsItems__MkvMX\",\"dialog\":\"Dialogs_dialog__vZvx9\",\"messages\":\"Dialogs_messages__2FeeQ\",\"message\":\"Dialogs_message__1KdUP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__I1Dza\",\"posts\":\"MyPosts_posts__1rcq0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__-BLGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1i5OU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2SUc9\"};","module.exports = __webpack_public_path__ + \"static/media/obl.5c924273.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__-nV2b\"};","import {PostPropsType} from \"./store\";\r\n\r\nexport type AddPostType = {\r\n    type: typeof ADD_POST\r\n\r\n}\r\nexport type UpdateNewPostTextType = {\r\n    type: typeof UPDATE_NEW_POST_TEXT\r\n    newText: string\r\n\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id:1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id:2, message: 'Its my first post', likesCount: 11},\r\n        {id:2, message: 'Its my first post', likesCount: 11},\r\n        {id:2, message: 'Its my first post', likesCount: 11}\r\n\r\n    ],\r\n        newPostText: 'IT-KAMASUTRA.COM'\r\n}\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n\r\nexport const profileReducer = (state = initialState, action:any) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: PostPropsType ={\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            state.posts.push(newPost)\r\n            state.newPostText = \"\";\r\n            return state;\r\n\r\n        case UPDATE_NEW_POST_TEXT:\r\n            state.newPostText = action.newText;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const addPostActionCreator = (): AddPostType => ({\r\n    type: ADD_POST\r\n})\r\nexport const updateNewPostTextActionCreator = (text: string): UpdateNewPostTextType => ({\r\n    type: UPDATE_NEW_POST_TEXT, newText: text\r\n})\r\n\r\nexport default profileReducer;","import {DialogsDataPropsType, MessageDataPropsType} from \"./store\";\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\nexport type DialogsDataPropsType1 = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageDataPropsType1 = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsPageType1 = {\r\n    dialogsData: Array<DialogsDataPropsType1>\r\n    messageData: Array<MessageDataPropsType1>\r\n    newMessageBody: string\r\n\r\n}\r\n\r\n\r\nlet initialState:DialogsPageType1 = {\r\n    dialogsData: [\r\n        {id: 1, name: 'Игорь'},\r\n        {id: 2, name: 'Василий'},\r\n        {id: 3, name: 'Петр'},\r\n        {id: 4, name: 'Михаил'},\r\n        {id: 5, name: 'Евгений'}\r\n    ],\r\n    messageData: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is you it-kamasutra'},\r\n        {id: 3, message: 'Oh, my dear friend'}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\n\r\nexport const dialogReducer = (state:DialogsPageType1 = initialState, action: DialogsActionType):DialogsPageType1 => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            state.newMessageBody = action.body;\r\n            return state;\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            state.newMessageBody = '';\r\n            state.messageData.push({id: 6, message: body});\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (): SendMessageType => ({\r\n    type: SEND_MESSAGE\r\n})\r\n\r\nexport const updateNewMessageBodyCreator = (body: string): UpdateNewMessageBody => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY, body\r\n})\r\n\r\nexport type UpdateNewMessageBody = {\r\n    type: typeof UPDATE_NEW_MESSAGE_BODY\r\n    body: string\r\n}\r\n\r\nexport type SendMessageType = {\r\n    type: typeof SEND_MESSAGE\r\n\r\n}\r\n\r\ntype DialogsActionType = UpdateNewMessageBody|SendMessageType\r\n\r\n\r\nexport default dialogReducer;","let initionState = {}\r\n\r\nconst sidebarReducer = (state = initionState, action: any) => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogReducer,\r\n    sidebar: sidebarReducer\r\n});\r\n\r\nlet store:any = createStore(reducers);\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nfunction Header() {\r\n    return  (\r\n\r\n        <header className={s.header}>\r\n\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Vkontakte.png/1200px-Vkontakte.png\" alt=\"logo\"/>\r\n\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Профиль</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Сообщения</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>Новости</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Музыка</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}> Настройки</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ava from './obl.jpg';\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div >\r\n            <img\r\n                src={ava}/>\r\n            <div className={s.descriptionBlock}>\r\n                avatar + description\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport './Post.module.css';\r\nimport s from './Post.module.css';\r\n\r\ntype MessageTypeProps = {\r\n    message: string\r\n    likesCount: number\r\n\r\n}\r\n\r\nfunction Post(props: MessageTypeProps) {\r\n    return (\r\n            <div className={s.item}>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQnwyJfE07eNN3BV-nBAVSQaGKodNh-UyxjFbDEFwpNR-efHwjy&usqp=CAU\" />\r\n                {props.message}\r\n                <div>\r\n                    <span>like</span> {props.likesCount}\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport './MyPosts.module.css';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\n\r\n\r\nexport type PostsTypeArray = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    // dispatch: (action: ActionsTypes) => void\r\n    updateNewPostText: (text:string)=> void\r\n    addPost: ()=> void\r\n\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\n\r\nfunction MyPosts(props: PostsTypeArray) {\r\n\r\n    let postElements = props.posts.map ( p => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = newPostElement.current ? newPostElement.current.value : \"\";\r\n        props.updateNewPostText(text);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <div >\r\n                <h3>My Posts</h3>\r\n            </div>\r\n            <div>\r\n                <div><textarea onChange={onPostChange} value={props.newPostText} ref={newPostElement}/></div>\r\n                <div><button onClick={onAddPost}>Add post</button></div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport './MyPosts.module.css';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {StateType, StoreType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// export type PostsTypeArray = {\r\n    // posts: Array<PostsType>\r\n    // newPostText: string\r\n    // dispatch: (action: ActionsTypes) => void\r\n//     store: StoreType\r\n// }\r\n\r\n// export type PostsType = {\r\n//     id: number\r\n//     message: string\r\n//     likesCount: number\r\n// }\r\n\r\n\r\nconst mapStateToProps = (state:StateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action: any) => void) => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = updateNewPostTextActionCreator(text);\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport './Profile.module.css';\r\nimport s from './Profile.module.css';\r\nimport MyPosts, {PostsTypeArray} from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport state, {ProfilePagePropsType, StoreType} from \"../../redux/store\";\r\nimport MyPostsCountainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n// type PropsType = {\r\n//     // profilePage: ProfilePagePropsType\r\n//     // dispatch: (action: ActionsTypes) => void\r\n//     store: StoreType\r\n// }\r\n\r\n\r\nfunction Profile() {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPostsCountainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogPropsType = {\n    name: string\n    id: number\n\n}\n\nconst DialogItem = (props: DialogPropsType) => {\n\n    let path = \"/dialogs/\" + props.id;\n\n    return (\n        <div className={s.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    );\n}\n\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\n\ntype MessagePropsType = {\n    message: string\n}\n\nconst Message = (props: MessagePropsType) => {\n    return (\n        <div>\n        <div className={s.message}>\n            {props.message}\n\n        </div>\n\n        </div>\n\n    )\n}\n\n\n\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPageType, StoreType} from \"../../redux/store\";\n\ntype PropsType = {\n    // dispatch: (action: ActionsTypes) => void\n    updateNewMessageBody: (body:string)=> void\n    sendMessage: ()=>void\n    dialogsPage: DialogsPageType\n}\n\nfunction Dialogs(props:PropsType) {\n\n    let state = props.dialogsPage;\n\n    let dialogElements = state.dialogsData.map(d => <DialogItem name={d.name} id={d.id}/>);\n    let messageElements = state.messageData.map(m => <Message message={m.message}/>);\n    let newMessageBody = state.newMessageBody;\n\n    // let NewMessageElement = React.createRef<HTMLTextAreaElement>();\n\n    let onSendMessageClick = () => {\n        props.sendMessage();\n    }\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = e.target.value;\n        props.updateNewMessageBody(body)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n\n                {dialogElements}\n\n            </div>\n\n            <div className={s.messages}>\n\n                <div>{messageElements}</div>\n                <div>\n                    <div><textarea value={newMessageBody}\n                                   onChange={onNewMessageChange}\n                                   placeholder={'Enter your message'} ></textarea></div>\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\n                </div>\n\n\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default Dialogs;","import React from 'react';\nimport {StateType} from \"../../redux/store\";\nimport Dialogs from \"./Dialogs\";\nimport {sendMessageCreator, updateNewMessageBodyCreator} from '../../redux/dialog-reducer';\nimport {connect} from \"react-redux\";\n\ntype PropsType = {\n    // store: StoreType\n    // dispatch: (action: ActionsTypes) => void\n}\n\n\nlet mapStateToProps = (state: StateType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nlet mapDispatchToProps = (dispatch: (action: any) => void) => {\n    return {\n        updateNewMessageBody: (body:string) => {\n            dispatch(updateNewMessageBodyCreator(body))\n        },\n        sendMessage: () => {\n            dispatch(sendMessageCreator())\n        }\n    }\n}\n\n\nconst SuperDialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs);\n\nexport default SuperDialogsContainer;","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {StoreType} from \"./redux/store\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport {PostsType} from \"./components/Profile/MyPosts/MyPosts\";\r\n\r\n\r\n// export type PostsType = {\r\n//     store: StoreType\r\n//     dispatch: (action: any) => void\r\n// }\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"app-all-wrapper\">\r\n\r\n                <div className=\"app-wrapper\">\r\n                    <Header/>\r\n                    <Navbar/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path=\"/profile\" render={() => <Profile />}/>\r\n                        <Route path=\"/dialogs\"\r\n                               render={() => <DialogsContainer/>}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\n// import {addPost, StateType, updateNewPostText} from \"./redux/State\";\r\n\r\nexport let rerenderEntireTree = (state: AppStateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n            <App />\r\n            </Provider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrerenderEntireTree(store.getState());\r\n\r\nstore.subscribe(() => {\r\n    let state = store.getState();\r\n    rerenderEntireTree(state);\r\n})\r\n\r\n// store.subscribe(rerenderEntireTree);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}