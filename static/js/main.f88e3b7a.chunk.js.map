{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/obl.jpg","components/Profile/Profile.module.css","serviceWorker.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","App.tsx","redux/State.tsx","render.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","alt","Navbar","nav","item","to","activeClassName","activeLink","Post","props","message","likesCount","MyPosts","postElements","posts","map","p","postBlock","onChange","e","updateNewPostText","currentTarget","value","newPostText","onClick","addPost","ProfileInfo","ava","descriptionBlock","Profile","profilePage","DialogItem","path","id","dialog","name","Message","Dialogs","dialogElements","dialogsPage","dialogsData","d","messageElements","messageData","m","NewMessageElement","React","createRef","dialogs","dialogsItems","messages","ref","alert","current","App","render","state","newPost","push","rerenderEntireTree","newText","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,iBCArFD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,kBCAlLD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,yB,iBCAjED,EAAOC,QAAU,CAAC,KAAO,qB,uCCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,iBCA3BD,EAAOC,QAAU,CAAC,iBAAmB,wC,gBCDrCD,EAAOC,QAAU,IAA0B,iC,4ECC3CD,EAAOC,QAAU,CAAC,QAAU,2B,0CCWRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8DCHSC,MAZf,WACI,OAEI,4BAAQC,UAAWC,IAAEC,QAEjB,yBAAKC,IAAI,+FAA+FC,IAAI,W,uBCoBzGC,MAxBf,WACI,OACI,yBAAKL,UAAWC,IAAEK,KACd,yBAAKN,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBR,IAAES,YAA1C,+CAEJ,yBAAKV,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBR,IAAES,YAA1C,2DAEJ,yBAAKV,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBR,IAAES,YAAvC,+CAEJ,yBAAKV,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBR,IAAES,YAAxC,yCAEJ,yBAAKV,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBR,IAAES,YAA3C,8D,0CCGDC,MAbf,SAAcC,GACV,OACQ,yBAAKZ,UAAWC,IAAEM,MACd,yBAAKJ,IAAI,wHACRS,EAAMC,QACP,6BACI,sCADJ,IACuBD,EAAME,cCoC9BC,MA7Bf,SAAiBH,GAEb,IAAII,EAAeJ,EAAMK,MAAMC,KAAM,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMN,QAASM,EAAEN,QAASC,WAAYK,EAAEL,gBAWlF,OACI,yBAAKd,UAAWC,IAAEmB,WACd,6BACI,yCAEJ,6BACI,6BAAK,8BAAUC,SAVR,SAACC,GAChBV,EAAMW,kBAAkBD,EAAEE,cAAcC,QASOA,MAAOb,EAAMc,eACpD,6BAAK,4BAAQC,QAhBX,WACVf,EAAMgB,QAAQhB,EAAMc,eAeP,cAET,yBAAK1B,UAAWC,IAAEgB,OACbD,K,kCC7BFa,MAbf,WACI,OACI,6BACI,yBACI1B,IAAK2B,MACT,yBAAK9B,UAAWC,IAAE8B,kBAAlB,0BCoBGC,MAbf,SAAiBpB,GAEb,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASK,MAAOL,EAAMqB,YAAYhB,MACzBW,QAAShB,EAAMgB,QACfF,YAAad,EAAMqB,YAAYP,YAC/BH,kBAAmBX,EAAMW,sB,gBCF/BW,EAZI,SAACtB,GAEhB,IAAIuB,EAAO,YAAcvB,EAAMwB,GAE/B,OACI,yBAAKpC,UAAWC,IAAEoC,QACd,kBAAC,IAAD,CAAS7B,GAAI2B,GAAOvB,EAAM0B,QCOvBC,EAfC,SAAC3B,GACb,OACI,6BACA,yBAAKZ,UAAWC,IAAEY,SACbD,EAAMC,WC+BJ2B,MAjCf,SAAiB5B,GAIb,IAAI6B,EAAiB7B,EAAM8B,YAAYC,YAAYzB,KAAI,SAAA0B,GAAC,OAAI,kBAAC,EAAD,CAAYN,KAAMM,EAAEN,KAAMF,GAAIQ,EAAER,QACxFS,EAAkBjC,EAAM8B,YAAYI,YAAY5B,KAAI,SAAA6B,GAAC,OAAI,kBAAC,EAAD,CAASlC,QAASkC,EAAElC,aAE7EmC,EAAoBC,IAAMC,YAM9B,OACI,yBAAKlD,UAAWC,IAAEkD,SACd,yBAAKnD,UAAWC,IAAEmD,cAEbX,GAIL,yBAAKzC,UAAWC,IAAEoD,UAEbR,EACD,8BAAUS,IAAKN,IACf,4BAAQrB,QAhBA,WAAO,IAAD,EACtB4B,MAAK,UAACP,EAAkBQ,eAAnB,aAAC,EAA2B/B,SAezB,6D,OCODgC,MAxBf,SAAa7C,GAGT,OACI,kBAAC,IAAD,KACI,yBAAKZ,UAAU,mBAEX,yBAAKA,UAAU,eACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAOmC,KAAK,WAAWuB,OAAQ,kBAAM,kBAAC,EAAD,CACjCzB,YAAarB,EAAM+C,MAAM1B,YACzBL,QAAShB,EAAMgB,QACfL,kBAAmBX,EAAMW,uBAC7B,kBAAC,IAAD,CAAOY,KAAK,WACLuB,OAAQ,kBAAM,kBAAC,EAAD,CAAShB,YAAa9B,EAAM+C,MAAMjB,sBCO3EiB,EAAmB,CACnB1B,YAAa,CACThB,MAAO,CACH,CAACmB,GAAG,EAAGvB,QAAS,mBAAoBC,WAAY,IAChD,CAACsB,GAAG,EAAGvB,QAAS,oBAAqBC,WAAY,IACjD,CAACsB,GAAG,EAAGvB,QAAS,oBAAqBC,WAAY,IACjD,CAACsB,GAAG,EAAGvB,QAAS,oBAAqBC,WAAY,KAGrDY,YAAa,oBAIjBgB,YAAa,CACTC,YAAa,CACT,CAACP,GAAI,EAAGE,KAAM,kCACd,CAACF,GAAI,EAAGE,KAAM,8CACd,CAACF,GAAI,EAAGE,KAAM,4BACd,CAACF,GAAI,EAAGE,KAAM,wCACd,CAACF,GAAI,EAAGE,KAAM,+CAElBQ,YAAa,CACT,CAACV,GAAI,EAAGvB,QAAS,MACjB,CAACuB,GAAI,EAAGvB,QAAS,2BACjB,CAACuB,GAAI,EAAGvB,QAAS,yBAOjBe,EAAU,WAElB,IAAIgC,EAAwB,CACxBxB,GAAI,EACJvB,QAAS8C,EAAM1B,YAAYP,YAC3BZ,WAAY,GAIhB6C,EAAM1B,YAAYhB,MAAM4C,KAAKD,GAC5BD,EAAM1B,YAAYP,YAAc,GAChCoC,EAAmBH,IAGbpC,EAAoB,SAACwC,GAC5BJ,EAAM1B,YAAYP,YAAcqC,EAChCD,EAAmBH,ICjFZG,EAAqB,SAACH,GAC7BK,IAASN,OACL,kBAAC,IAAMO,WAAP,KACI,kBAAC,EAAD,CAAKN,MAAOA,EACP/B,QAASA,EACTL,kBAAmBA,KAE5B2C,SAASC,eAAe,UCNhCL,EFoFeH,GX+CT,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9D,c","file":"static/js/main.f88e3b7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__39050\",\"item\":\"Navbar_item__3kXBA\",\"activeLink\":\"Navbar_activeLink__2ULO0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__znGEb\",\"dialogsItems\":\"Dialogs_dialogsItems__MkvMX\",\"dialog\":\"Dialogs_dialog__vZvx9\",\"messages\":\"Dialogs_messages__2FeeQ\",\"message\":\"Dialogs_message__1KdUP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__I1Dza\",\"posts\":\"MyPosts_posts__1rcq0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__-BLGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1i5OU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2SUc9\"};","module.exports = __webpack_public_path__ + \"static/media/obl.5c924273.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__-nV2b\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nfunction Header() {\r\n    return  (\r\n\r\n        <header className={s.header}>\r\n\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Vkontakte.png/1200px-Vkontakte.png\" alt=\"logo\"/>\r\n\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Профиль</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Сообщения</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>Новости</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Музыка</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}> Настройки</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Post.module.css';\r\nimport s from './Post.module.css';\r\n\r\ntype MessageTypeProps = {\r\n    message: string\r\n    likesCount: number\r\n\r\n}\r\n\r\nfunction Post(props: MessageTypeProps) {\r\n    return (\r\n            <div className={s.item}>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQnwyJfE07eNN3BV-nBAVSQaGKodNh-UyxjFbDEFwpNR-efHwjy&usqp=CAU\" />\r\n                {props.message}\r\n                <div>\r\n                    <span>like</span> {props.likesCount}\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport './MyPosts.module.css';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\n\r\n\r\nexport type PostsTypeArray = {\r\n    posts: Array<PostsType>\r\n    addPost: (message: string ) => void\r\n    newPostText: string\r\n    updateNewPostText: (newText: string) => void\r\n\r\n\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n\r\n}\r\n\r\n\r\n\r\nfunction MyPosts(props: PostsTypeArray) {\r\n\r\n    let postElements = props.posts.map ( p => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n    let addPost = () => {\r\n        props.addPost(props.newPostText);\r\n\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <div >\r\n                <h3>My Posts</h3>\r\n            </div>\r\n            <div>\r\n                <div><textarea onChange={onPostChange} value={props.newPostText}/></div>\r\n                <div><button onClick={addPost}>Add post</button></div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ava from './obl.jpg';\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div >\r\n            <img\r\n                src={ava}/>\r\n            <div className={s.descriptionBlock}>\r\n                avatar + description\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport './Profile.module.css';\r\nimport s from './Profile.module.css';\r\nimport MyPosts, {PostsTypeArray} from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport state, {addPost, ProfilePagePropsType, updateNewPostText} from \"../../redux/State\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePagePropsType\r\n    addPost: (message: string ) => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\n\r\nfunction Profile(props:PropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPosts posts={props.profilePage.posts}\r\n                     addPost={props.addPost}\r\n                     newPostText={props.profilePage.newPostText}\r\n                     updateNewPostText={props.updateNewPostText}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogPropsType = {\n    name: string\n    id: number\n\n}\n\nconst DialogItem = (props: DialogPropsType) => {\n\n    let path = \"/dialogs/\" + props.id;\n\n    return (\n        <div className={s.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    );\n}\n\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\n\ntype MessagePropsType = {\n    message: string\n}\n\nconst Message = (props: MessagePropsType) => {\n    return (\n        <div>\n        <div className={s.message}>\n            {props.message}\n\n        </div>\n\n        </div>\n\n    )\n}\n\n\n\nexport default Message;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPageType} from \"../../redux/State\";\n\ntype PropsType = {\n    dialogsPage: DialogsPageType\n}\n\nfunction Dialogs(props:PropsType) {\n\n\n\n    let dialogElements = props.dialogsPage.dialogsData.map(d => <DialogItem name={d.name} id={d.id}/>);\n    let messageElements = props.dialogsPage.messageData.map(m => <Message message={m.message}/>);\n\n    let NewMessageElement = React.createRef<HTMLTextAreaElement>();\n\n    let addNewMessage = () => {\n        alert(NewMessageElement.current?.value)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n\n                {dialogElements}\n\n            </div>\n\n            <div className={s.messages}>\n\n                {messageElements}\n                <textarea ref={NewMessageElement}></textarea>\n                <button onClick={addNewMessage}>Отправить</button>\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default Dialogs;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\n// import {PostsTypeArray} from \"./components/Profile/MyPosts/MyPosts\";\nimport {DialogsPageType, StateType, updateNewPostText} from \"./redux/State\";\n\n\nexport type PostsType = {\n   state: StateType\n   addPost: (message: string ) => void\n   updateNewPostText: (newText: string ) => void\n}\n\n\nfunction App(props: PostsType) {\n\n\n    return (\n        <BrowserRouter>\n            <div className=\"app-all-wrapper\">\n\n                <div className=\"app-wrapper\">\n                    <Header/>\n                    <Navbar/>\n                    <div className='app-wrapper-content'>\n                        <Route path=\"/profile\" render={() => <Profile\n                            profilePage={props.state.profilePage}\n                            addPost={props.addPost}\n                            updateNewPostText={props.updateNewPostText}/>}/>\n                        <Route path=\"/dialogs\"\n                               render={() => <Dialogs dialogsPage={props.state.dialogsPage}/>}/>\n                    </div>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import {rerenderEntireTree} from \"../render\";\r\n\r\nexport type PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n\r\n}\r\n\r\nexport type DialogsDataPropsType = {\r\n    id: number\r\n    name: string\r\n\r\n}\r\nexport type MessageDataPropsType = {\r\n\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type ProfilePagePropsType = {\r\n\r\n    newPostText: string\r\n    posts: Array<PostPropsType>\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<DialogsDataPropsType>\r\n    messageData: Array<MessageDataPropsType>\r\n}\r\n\r\nexport type StateType = {\r\n\r\n    profilePage: ProfilePagePropsType\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlet state: StateType = {\r\n    profilePage: {\r\n        posts: [\r\n            {id:1, message: 'Hi, how are you?', likesCount: 12},\r\n            {id:2, message: 'Its my first post', likesCount: 11},\r\n            {id:2, message: 'Its my first post', likesCount: 11},\r\n            {id:2, message: 'Its my first post', likesCount: 11}\r\n\r\n        ],\r\n        newPostText: 'IT-KAMASUTRA.COM'\r\n\r\n    },\r\n\r\n    dialogsPage: {\r\n        dialogsData: [\r\n            {id: 1, name: 'Игорь'},\r\n            {id: 2, name: 'Василий'},\r\n            {id: 3, name: 'Петр'},\r\n            {id: 4, name: 'Михаил'},\r\n            {id: 5, name: 'Евгений'}\r\n        ],\r\n        messageData: [\r\n            {id: 1, message: 'Hi'},\r\n            {id: 2, message: 'How is you it-kamasutra'},\r\n            {id: 3, message: 'Oh, my dear friend'}\r\n        ]\r\n    }\r\n\r\n}\r\n\r\n\r\n export let addPost = () => {\r\n\r\n    let newPost: PostPropsType ={\r\n        id: 5,\r\n        message: state.profilePage.newPostText,\r\n        likesCount: 0\r\n\r\n    }\r\n\r\n    state.profilePage.posts.push(newPost)\r\n     state.profilePage.newPostText = \"\";\r\n     rerenderEntireTree(state);\r\n }\r\n\r\nexport let updateNewPostText = (newText: string) => {\r\n    state.profilePage.newPostText = newText;\r\n    rerenderEntireTree(state);\r\n}\r\n\r\n\r\nexport default state;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {addPost, StateType, updateNewPostText} from \"./redux/State\";\n\nexport let rerenderEntireTree = (state: StateType) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App state={state}\n                 addPost={addPost}\n                 updateNewPostText={updateNewPostText}/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n\n","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {rerenderEntireTree} from \"./render\";\nimport state from \"./redux/State\";\n\n\n\nrerenderEntireTree(state);\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}