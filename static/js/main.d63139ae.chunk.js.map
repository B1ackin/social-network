{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/obl.jpg","components/Profile/Profile.module.css","redux/State.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","store","_state","profilePage","posts","id","message","likesCount","newPostText","dialogsPage","dialogsData","name","messageData","_callSubscriber","console","log","getState","this","subscribe","observer","dispatch","action","type","newPost","push","newText","Header","className","s","header","src","alt","Navbar","nav","item","to","activeClassName","activeLink","Post","props","MyPosts","postElements","map","p","newPostElement","React","createRef","postBlock","onChange","e","text","updateNewPostTextActionCreator","current","value","ref","onClick","ProfileInfo","ava","descriptionBlock","Profile","DialogItem","path","dialog","Message","Dialogs","dialogElements","d","messageElements","m","NewMessageElement","dialogs","dialogsItems","messages","alert","App","render","state","Boolean","window","location","hostname","match","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d63139ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__39050\",\"item\":\"Navbar_item__3kXBA\",\"activeLink\":\"Navbar_activeLink__2ULO0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__znGEb\",\"dialogsItems\":\"Dialogs_dialogsItems__MkvMX\",\"dialog\":\"Dialogs_dialog__vZvx9\",\"messages\":\"Dialogs_messages__2FeeQ\",\"message\":\"Dialogs_message__1KdUP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__I1Dza\",\"posts\":\"MyPosts_posts__1rcq0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__-BLGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1i5OU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2SUc9\"};","module.exports = __webpack_public_path__ + \"static/media/obl.5c924273.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__-nV2b\"};","const ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nexport const addPostActionCreator = () => ({\r\n    type: ADD_POST\r\n})\r\n\r\nexport const updateNewPostTextActionCreator = (text: string) => ({\r\n    type: UPDATE_NEW_POST_TEXT, newText: text\r\n})\r\n\r\n\r\nlet rerenderEntireTree = () => {\r\n    console.log('state changed');\r\n}\r\n\r\nexport type PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n\r\n}\r\n\r\nexport type DialogsDataPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageDataPropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type ProfilePagePropsType = {\r\n\r\n    newPostText: string\r\n    posts: Array<PostPropsType>\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<DialogsDataPropsType>\r\n    messageData: Array<MessageDataPropsType>\r\n}\r\n\r\nexport type StateType = {\r\n\r\n    profilePage: ProfilePagePropsType\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    getState: () => StateType\r\n    dispatch: (action: AddPostActionType ) => void\r\n    _callSubscriber: () => void\r\n    subscribe: (observer: any) => void\r\n\r\n}\r\n\r\nexport type AddPostActionType = {\r\n    type: string\r\n    newPostText?: string\r\n    newText?: string\r\n\r\n}\r\n\r\n// export type ActionsTypes = AddPostActionType | ChangeNewTextActionType\r\n\r\n\r\nlet store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            posts: [\r\n                {id:1, message: 'Hi, how are you?', likesCount: 12},\r\n                {id:2, message: 'Its my first post', likesCount: 11},\r\n                {id:2, message: 'Its my first post', likesCount: 11},\r\n                {id:2, message: 'Its my first post', likesCount: 11}\r\n\r\n            ],\r\n            newPostText: 'IT-KAMASUTRA.COM'\r\n\r\n        },\r\n\r\n        dialogsPage: {\r\n            dialogsData: [\r\n                {id: 1, name: 'Игорь'},\r\n                {id: 2, name: 'Василий'},\r\n                {id: 3, name: 'Петр'},\r\n                {id: 4, name: 'Михаил'},\r\n                {id: 5, name: 'Евгений'}\r\n            ],\r\n            messageData: [\r\n                {id: 1, message: 'Hi'},\r\n                {id: 2, message: 'How is you it-kamasutra'},\r\n                {id: 3, message: 'Oh, my dear friend'}\r\n            ]\r\n        }\r\n    },\r\n    _callSubscriber () {\r\n        console.log('state changed');\r\n    },\r\n\r\n    getState() {\r\n        return this._state;\r\n    },\r\n    subscribe (observer: any) {\r\n        this._callSubscriber = observer;\r\n    },\r\n\r\n    dispatch(action) {\r\n        if(action.type === 'ADD-POST') {\r\n            let newPost: PostPropsType ={\r\n                id: 5,\r\n                message: this._state.profilePage.newPostText,\r\n                likesCount: 0\r\n\r\n            }\r\n\r\n            this._state.profilePage.posts.push(newPost)\r\n            this._state.profilePage.newPostText = \"\";\r\n            this._callSubscriber();\r\n\r\n        } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\r\n            if(action.newText) {\r\n                this._state.profilePage.newPostText = action.newText;\r\n                this._callSubscriber();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nfunction Header() {\r\n    return  (\r\n\r\n        <header className={s.header}>\r\n\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Vkontakte.png/1200px-Vkontakte.png\" alt=\"logo\"/>\r\n\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Профиль</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Сообщения</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>Новости</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Музыка</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}> Настройки</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Post.module.css';\r\nimport s from './Post.module.css';\r\n\r\ntype MessageTypeProps = {\r\n    message: string\r\n    likesCount: number\r\n\r\n}\r\n\r\nfunction Post(props: MessageTypeProps) {\r\n    return (\r\n            <div className={s.item}>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQnwyJfE07eNN3BV-nBAVSQaGKodNh-UyxjFbDEFwpNR-efHwjy&usqp=CAU\" />\r\n                {props.message}\r\n                <div>\r\n                    <span>like</span> {props.likesCount}\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport './MyPosts.module.css';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {\r\n    addPostActionCreator,\r\n    AddPostActionType,\r\n    updateNewPostTextActionCreator\r\n} from \"../../../redux/State\";\r\n\r\n\r\nexport type PostsTypeArray = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    dispatch: (action: AddPostActionType) => void\r\n\r\n\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\n\r\nfunction MyPosts(props: PostsTypeArray) {\r\n\r\n    let postElements = props.posts.map ( p => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        props.dispatch(addPostActionCreator());\r\n\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = newPostElement.current ? newPostElement.current.value : \"\";\r\n       // let textEvent = e.currentTarget.value\r\n        // let action = {type: \"UPDATE-NEW-POST-TEXT\", newText: text};\r\n        let action = updateNewPostTextActionCreator(text);\r\n        props.dispatch( action );\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <div >\r\n                <h3>My Posts</h3>\r\n            </div>\r\n            <div>\r\n                <div><textarea onChange={onPostChange} value={props.newPostText} ref={newPostElement}/></div>\r\n                <div><button onClick={addPost}>Add post</button></div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ava from './obl.jpg';\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div >\r\n            <img\r\n                src={ava}/>\r\n            <div className={s.descriptionBlock}>\r\n                avatar + description\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport './Profile.module.css';\r\nimport s from './Profile.module.css';\r\nimport MyPosts, {PostsTypeArray} from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport state, {AddPostActionType, ProfilePagePropsType} from \"../../redux/State\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePagePropsType\r\n    dispatch: (action: AddPostActionType) => void\r\n}\r\n\r\n\r\nfunction Profile(props:PropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPosts posts={props.profilePage.posts}\r\n                     newPostText={props.profilePage.newPostText}\r\n                     dispatch={props.dispatch}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogPropsType = {\n    name: string\n    id: number\n\n}\n\nconst DialogItem = (props: DialogPropsType) => {\n\n    let path = \"/dialogs/\" + props.id;\n\n    return (\n        <div className={s.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    );\n}\n\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\n\ntype MessagePropsType = {\n    message: string\n}\n\nconst Message = (props: MessagePropsType) => {\n    return (\n        <div>\n        <div className={s.message}>\n            {props.message}\n\n        </div>\n\n        </div>\n\n    )\n}\n\n\n\nexport default Message;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPageType} from \"../../redux/State\";\n\ntype PropsType = {\n    dialogsPage: DialogsPageType\n}\n\nfunction Dialogs(props:PropsType) {\n\n\n\n    let dialogElements = props.dialogsPage.dialogsData.map(d => <DialogItem name={d.name} id={d.id}/>);\n    let messageElements = props.dialogsPage.messageData.map(m => <Message message={m.message}/>);\n\n    let NewMessageElement = React.createRef<HTMLTextAreaElement>();\n\n    let addNewMessage = () => {\n        alert(NewMessageElement.current?.value)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n\n                {dialogElements}\n\n            </div>\n\n            <div className={s.messages}>\n\n                {messageElements}\n                <textarea ref={NewMessageElement}></textarea>\n                <button onClick={addNewMessage}>Отправить</button>\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default Dialogs;","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Dialogs from \"./components/Dialogs/Dialogs\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {AddPostActionType, StateType} from \"./redux/State\";\r\n\r\n\r\nexport type PostsType = {\r\n    state: StateType\r\n    dispatch: (action: AddPostActionType) => void\r\n}\r\n\r\n\r\nfunction App(props: PostsType) {\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"app-all-wrapper\">\r\n\r\n                <div className=\"app-wrapper\">\r\n                    <Header/>\r\n                    <Navbar/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path=\"/profile\" render={() => <Profile\r\n                            profilePage={props.state.profilePage}\r\n                            dispatch={props.dispatch}/>}/>\r\n                        <Route path=\"/dialogs\"\r\n                               render={() => <Dialogs dialogsPage={props.state.dialogsPage}/>}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\r\nimport store, {StateType} from \"./redux/State\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import {addPost, StateType, updateNewPostText} from \"./redux/State\";\r\n\r\nexport let rerenderEntireTree = (state: StateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App state={store.getState()}\r\n                 dispatch={store.dispatch.bind(store)}/>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrerenderEntireTree(store.getState());\r\n\r\nstore.subscribe(rerenderEntireTree);\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}